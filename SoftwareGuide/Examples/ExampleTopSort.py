outputToSOCBMap = dict()

class ExampleTopSort():
  def __init__(self, OCBList):
    self.OCBList = OCBList
    self.SOCBList = list()
    self.PopulateSOCBList()
    self.PopulateSOCBOutputMap()
    self.LinkSOCBs()
    #for socb in self.SOCBList:
    #  if not (len(socb.children) == 0):
    #    for n in socb.children:
    #      print("{0} depends on {1}".format(socb.ocb.sourceFile, n.ocb.outputs))
    self.unsortedSOCBSet = set(self.SOCBList)
    self.sortedSOCBList = list()
    self.sortSOCBList()

  def PopulateSOCBOutputMap(self):
    for socb in self.SOCBList:
      for outputFile in socb.ocb.outputs:
        outputToSOCBMap[outputFile] = socb;
    return

  def PopulateSOCBList(self):
    for ocb in self.OCBList:
      self.SOCBList.append(SortableOCB(ocb))
    return

  def LinkSOCBs(self):
    for socb in self.SOCBList:
      socb.PopulateChildren()
    return

  def sortSOCBList(self):
    while(len(self.unsortedSOCBSet) > 0):
      candidate = self.unsortedSOCBSet.pop()
      if(len(candidate.children) > 0):
        self.unsortedSOCBSet.add(candidate)
      else:
        for parent in candidate.parents:
          parent.children.remove(candidate)
        self.sortedSOCBList.append(candidate)
    return

  def GetSortedOCBList(self):
      sortedOCBList = list(socb.ocb for socb in self.sortedSOCBList)
      return sortedOCBList

class SortableOCB():
  def __init__(self, OneCodeBlock):
    self.ocb = OneCodeBlock
    self.parents = set()
    self.children = set()

  def PopulateChildren(self):
    for inputFile in self.ocb.inputs:
      # If one of this file's inputs is generated by another program
      # it is dependent on that program.
      if inputFile in outputToSOCBMap:
        self.children.add(outputToSOCBMap[inputFile])
        outputToSOCBMap[inputFile].parents.add(self)
    return
